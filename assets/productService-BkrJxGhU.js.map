{"version":3,"file":"productService-BkrJxGhU.js","sources":["../../src/data/mockProducts.ts","../../src/services/api/productService.ts"],"sourcesContent":["import { Product } from \"@/types/inventory\";\n\nexport const mockProducts: Partial<Product>[] = [\n  // Grains\n  {\n    name: \"McCann's Quick Cooking Irish Oatmeal\",\n    category: \"Grains\",\n    unit: \"box\",\n    current_stock: 12,\n    reorder_point: 5,\n    cost: 4.50,\n    image: null\n  },\n  {\n    name: \"Jasmine Rice\",\n    category: \"Grains\",\n    unit: \"lb\",\n    current_stock: 50,\n    reorder_point: 25,\n    cost: 2.99,\n    image: null\n  },\n\n  // Meat\n  {\n    name: \"Ground Beef\",\n    category: \"Meat\",\n    unit: \"lb\",\n    current_stock: 25,\n    reorder_point: 10,\n    cost: 5.99,\n    image: null\n  },\n  {\n    name: \"Chicken Breast\",\n    category: \"Meat\",\n    unit: \"lb\",\n    current_stock: 30,\n    reorder_point: 15,\n    cost: 4.99,\n    image: null\n  },\n\n  // Produce\n  {\n    name: \"Fresh Tomatoes\",\n    category: \"Produce\",\n    unit: \"lb\",\n    current_stock: 20,\n    reorder_point: 8,\n    cost: 2.99,\n    image: null\n  },\n  {\n    name: \"Fresh Herbs\",\n    category: \"Produce\",\n    unit: \"bunch\",\n    current_stock: 15,\n    reorder_point: 5,\n    cost: 1.99,\n    image: null\n  },\n\n  // Pantry\n  {\n    name: \"Olive Oil\",\n    category: \"Pantry\",\n    unit: \"bottle\",\n    current_stock: 18,\n    reorder_point: 8,\n    cost: 15.99,\n    image: null\n  },\n  {\n    name: \"All-Purpose Flour\",\n    category: \"Pantry\",\n    unit: \"lb\",\n    current_stock: 40,\n    reorder_point: 20,\n    cost: 1.99,\n    image: null\n  },\n\n  // Beverages\n  {\n    name: \"Vintage Seltzer Original\",\n    category: \"Beverages\",\n    unit: \"case\",\n    current_stock: 15,\n    reorder_point: 6,\n    cost: 12.99,\n    image: null\n  },\n  {\n    name: \"Fresh Coffee Beans\",\n    category: \"Beverages\",\n    unit: \"lb\",\n    current_stock: 25,\n    reorder_point: 10,\n    cost: 14.99,\n    image: null\n  },\n\n  // Supplies\n  {\n    name: \"To-Go Containers\",\n    category: \"Supplies\",\n    unit: \"case\",\n    current_stock: 12,\n    reorder_point: 4,\n    cost: 24.99,\n    image: null\n  },\n  {\n    name: \"Paper Napkins\",\n    category: \"Supplies\",\n    unit: \"case\",\n    current_stock: 8,\n    reorder_point: 3,\n    cost: 18.99,\n    image: null\n  }\n]; ","import { toast } from \"sonner\";\nimport { Product } from \"@/types/inventory\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { mockProducts } from \"@/data/mockProducts\";\n\nexport const getProducts = async (): Promise<Product[]> => {\n  try {\n    const { data, error } = await supabase\n      .from('products')\n      .select('*');\n      \n    if (error) {\n      console.error('Error fetching products:', error);\n      toast.error(\"Failed to fetch products\");\n      throw error;\n    }\n    \n    return data.map(item => ({\n      id: item.id,\n      name: item.name,\n      category: item.category,\n      unit: item.unit,\n      currentStock: item.current_stock,\n      reorderPoint: item.reorder_point,\n      cost: item.cost,\n      image: item.image\n    })) as Product[];\n  } catch (error) {\n    console.error('Error in getProducts:', error);\n    throw error;\n  }\n};\n\nexport const addProduct = async (product: Omit<Product, \"id\">): Promise<Product> => {\n  try {\n    const { data, error } = await supabase\n      .from('products')\n      .insert({\n        name: product.name,\n        category: product.category,\n        unit: product.unit,\n        current_stock: product.currentStock,\n        reorder_point: product.reorderPoint,\n        cost: product.cost,\n        image: product.image\n      })\n      .select()\n      .single();\n      \n    if (error) {\n      console.error('Error adding product:', error);\n      toast.error(\"Failed to add product\");\n      throw error;\n    }\n    \n    toast.success(\"Product added successfully\");\n    return {\n      id: data.id,\n      name: data.name,\n      category: data.category,\n      unit: data.unit,\n      currentStock: data.current_stock,\n      reorderPoint: data.reorder_point,\n      cost: data.cost,\n      image: data.image\n    } as Product;\n  } catch (error) {\n    console.error('Error in addProduct:', error);\n    throw error;\n  }\n};\n\nexport const updateProduct = async (product: Product): Promise<Product> => {\n  try {\n    const { data, error } = await supabase\n      .from('products')\n      .update({\n        name: product.name,\n        category: product.category,\n        unit: product.unit,\n        current_stock: product.currentStock,\n        reorder_point: product.reorderPoint,\n        cost: product.cost,\n        image: product.image\n      })\n      .eq('id', product.id)\n      .select()\n      .single();\n      \n    if (error) {\n      console.error('Error updating product:', error);\n      toast.error(\"Failed to update product\");\n      throw error;\n    }\n    \n    toast.success(\"Product updated successfully\");\n    return {\n      id: data.id,\n      name: data.name,\n      category: data.category,\n      unit: data.unit,\n      currentStock: data.current_stock,\n      reorderPoint: data.reorder_point,\n      cost: data.cost,\n      image: data.image\n    } as Product;\n  } catch (error) {\n    console.error('Error in updateProduct:', error);\n    throw error;\n  }\n};\n\nexport const deleteProduct = async (id: string): Promise<void> => {\n  try {\n    const { error } = await supabase\n      .from('products')\n      .delete()\n      .eq('id', id);\n      \n    if (error) {\n      console.error('Error deleting product:', error);\n      toast.error(\"Failed to delete product\");\n      throw error;\n    }\n    \n    toast.success(\"Product deleted successfully\");\n  } catch (error) {\n    console.error('Error in deleteProduct:', error);\n    throw error;\n  }\n};\n\nexport const updateProducts = async (products: Product[]): Promise<void> => {\n  try {\n    const updates = products.map(product => ({\n      id: product.id,\n      name: product.name,\n      category: product.category,\n      unit: product.unit,\n      current_stock: product.currentStock,\n      reorder_point: product.reorderPoint,\n      cost: product.cost,\n      image: product.image\n    }));\n\n    const { error } = await supabase\n      .from('products')\n      .upsert(updates);\n\n    if (error) {\n      console.error('Error updating products:', error);\n      toast.error(\"Failed to update products\");\n      throw error;\n    }\n\n    toast.success(\"Products updated successfully\");\n  } catch (error) {\n    console.error('Error in updateProducts:', error);\n    throw error;\n  }\n};\n\nexport const loadMockProducts = async () => {\n  try {\n    toast.loading(\"Checking inventory data...\");\n\n    // First, check if we already have products\n    const { data: existingProducts, error: checkError } = await supabase\n      .from('products')\n      .select('id')\n      .limit(1);\n\n    if (checkError) {\n      console.error('Error checking existing products:', checkError);\n      toast.error(\"Failed to check existing data\");\n      throw checkError;\n    }\n\n    // If we already have products, don't reload mock data\n    if (existingProducts && existingProducts.length > 0) {\n      toast.success(\"Inventory data already loaded\");\n      return;\n    }\n\n    toast.loading(\"Loading sample data...\");\n\n    // First, delete all invoice items to handle foreign key constraints\n    const { error: deleteInvoiceItemsError } = await supabase\n      .from('invoice_items')\n      .delete()\n      .not('id', 'is', null);\n\n    if (deleteInvoiceItemsError) {\n      console.error('Error deleting invoice items:', deleteInvoiceItemsError);\n      toast.error(\"Failed to clear existing data\");\n      throw deleteInvoiceItemsError;\n    }\n\n    // Then delete all invoices\n    const { error: deleteInvoicesError } = await supabase\n      .from('invoices')\n      .delete()\n      .not('id', 'is', null);\n\n    if (deleteInvoicesError) {\n      console.error('Error deleting invoices:', deleteInvoicesError);\n      toast.error(\"Failed to clear existing data\");\n      throw deleteInvoicesError;\n    }\n\n    // Finally, delete all products\n    const { error: deleteProductsError } = await supabase\n      .from('products')\n      .delete()\n      .not('id', 'is', null);\n\n    if (deleteProductsError) {\n      console.error('Error deleting products:', deleteProductsError);\n      toast.error(\"Failed to clear existing data\");\n      throw deleteProductsError;\n    }\n\n    // Insert mock products\n    const { error: insertError } = await supabase\n      .from('products')\n      .insert(mockProducts.map(product => ({\n        name: product.name,\n        category: product.category,\n        unit: product.unit,\n        current_stock: product.current_stock,\n        reorder_point: product.reorder_point,\n        cost: product.cost,\n        image: null\n      })));\n\n    if (insertError) {\n      console.error('Error inserting mock products:', insertError);\n      toast.error(\"Failed to load sample data\");\n      throw insertError;\n    }\n\n    toast.success(\"Sample data loaded successfully\");\n  } catch (error) {\n    console.error('Error in loadMockProducts:', error);\n    toast.error(\"Failed to load sample data\");\n    throw error;\n  }\n};\n"],"names":["mockProducts","getProducts","data","error","supabase","toast","item","addProduct","product","updateProduct","deleteProduct","id","loadMockProducts","existingProducts","checkError","deleteInvoiceItemsError","deleteInvoicesError","deleteProductsError","insertError"],"mappings":"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"}