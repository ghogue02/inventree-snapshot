{"version":3,"file":"Scan-CEij-hF4.js","sources":["../../node_modules/lucide-react/dist/esm/icons/refresh-cw.js","../../src/hooks/useScanAnalysis.ts","../../src/components/scan/CameraCapture.tsx","../../src/components/scan/VideoUploader.tsx","../../src/components/scan/RecognizedItemsList.tsx","../../src/components/scan/AnalysisResults.tsx","../../src/pages/Scan.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RefreshCw = createLucideIcon(\"RefreshCw\", [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n]);\n\nexport { RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","import { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { InventoryRecognitionResult, Product } from \"@/types/inventory\";\nimport { analyzeImageWithOpenAI, processInventoryVideo, addInventoryCounts, addProduct } from \"@/services/apiService\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const useScanAnalysis = (products: Product[]) => {\n  const navigate = useNavigate();\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<string | null>(null);\n  const [recognizedItems, setRecognizedItems] = useState<InventoryRecognitionResult[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n\n  const analyzeImage = async (imageData?: string) => {\n    const imageToAnalyze = imageData || capturedImage;\n    \n    if (!imageToAnalyze) return;\n    \n    setIsAnalyzing(true);\n    \n    try {\n      const base64Data = imageToAnalyze.split(\",\")[1];\n      \n      toast.loading(\"Analyzing image...\");\n      \n      const result = await analyzeImageWithOpenAI(\n        imageToAnalyze,\n        \"Please analyze this image and identify all food inventory items you see. For each item, include the specific product name, size/volume information, and quantity as individual units.\"\n      );\n      \n      setAnalysisResult(result);\n      toast.dismiss();\n      toast.success(\"Analysis complete\");\n      \n      const recognizedItems = extractItemsFromAnalysis(result, products);\n      setRecognizedItems(recognizedItems);\n      \n    } catch (error) {\n      console.error(\"Error analyzing image:\", error);\n      toast.dismiss();\n      toast.error(\"Failed to analyze image. Please try again or upload a clearer photo.\");\n      setAnalysisResult(null);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const extractItemsFromAnalysis = (analysisText: string, products: Product[]): InventoryRecognitionResult[] => {\n    const items: InventoryRecognitionResult[] = [];\n    const lines = analysisText.split(\"\\n\");\n    \n    let currentProductName = \"\";\n    let currentSize = \"\";\n    let currentQuantity = 1;\n    \n    for (const line of lines) {\n      // Extract size/volume information\n      const sizeMatch = line.match(/size\\s*\\/?\\s*volume:?\\s*(.+)/i) || \n                       line.match(/([0-9.]+\\s*(?:oz|g|ml|L|lb|kg)(?:\\s*\\(\\s*[0-9.]+\\s*[a-z]+\\s*\\))?)/i);\n      \n      if (sizeMatch) {\n        currentSize = sizeMatch[1].trim();\n      }\n      \n      // Extract product name\n      const nameLine = line.match(/product name:?\\s*(.+)/i) ||\n                      line.match(/^[0-9]+\\.\\s*(.+)/);\n      if (nameLine) {\n        currentProductName = nameLine[1].trim();\n        \n        // Check for size in the product name if not found earlier\n        if (!currentSize) {\n          const sizeInName = currentProductName.match(/([0-9.]+\\s*(?:oz|g|ml|L|lb|kg)(?:\\s*\\(\\s*[0-9.]+\\s*[a-z]+\\s*\\))?)/i);\n          if (sizeInName) {\n            currentSize = sizeInName[1].trim();\n          }\n        }\n      }\n      \n      // Extract quantity\n      const quantityLine = line.match(/quantity:?\\s*(\\d+)/i);\n      if (quantityLine) {\n        currentQuantity = parseInt(quantityLine[1], 10);\n      }\n      \n      // If we have a complete item, add it to the list\n      if (currentProductName && \n         (line.includes(\"Size/Volume:\") || line.includes(\"Quantity:\") || \n          line.trim().length === 0 || line.includes(\"No other\") || line.includes(\"visible\"))) {\n        \n        const matchedProduct = checkIfItemExists(currentProductName);\n        \n        items.push({\n          productId: matchedProduct?.id || \"\",\n          name: currentProductName,\n          count: currentQuantity || 1,\n          confidence: 0.9,\n          size: currentSize || \"\"\n        });\n        \n        // Reset for next item\n        currentProductName = \"\";\n        currentSize = \"\";\n        currentQuantity = 1;\n      }\n    }\n    \n    // Add the last item if there is one\n    if (currentProductName) {\n      const matchedProduct = checkIfItemExists(currentProductName);\n      \n      items.push({\n        productId: matchedProduct?.id || \"\",\n        name: currentProductName,\n        count: currentQuantity,\n        confidence: 0.9,\n        size: currentSize || \"\"\n      });\n    }\n    \n    return items;\n  };\n\n  const processVideo = async () => {\n    if (!selectedFile) {\n      toast.error(\"Please select a file first\");\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const results = await processInventoryVideo(selectedFile);\n      setRecognizedItems(results);\n      setAnalysisResult(\"Video processed successfully. Here are the detected items:\");\n      \n    } catch (error) {\n      console.error(\"Error processing video:\", error);\n      toast.error(\"Failed to process video\");\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleFileSelected = (file: File) => {\n    setSelectedFile(file);\n  };\n\n  const saveInventoryCounts = async () => {\n    if (recognizedItems.length === 0) {\n      toast.error(\"No items to save\");\n      return;\n    }\n\n    try {\n      toast.loading(\"Saving inventory counts...\");\n      \n      // Filter out items that don't have a product ID\n      const validCounts = recognizedItems\n        .filter(item => item.productId)\n        .map(item => ({\n          productId: item.productId,\n          count: item.count,\n          countedAt: new Date(),\n          countMethod: \"video\" as const,\n          notes: \"Counted via camera scan\"\n        }));\n\n      if (validCounts.length === 0) {\n        toast.dismiss();\n        toast.warning(\"No valid inventory items to save. Please add products to inventory first.\");\n        return;\n      }\n      \n      console.log(\"Attempting to save inventory counts:\", validCounts);\n      \n      const result = await addInventoryCounts(validCounts);\n      \n      toast.dismiss();\n      toast.success(\"Inventory counts saved successfully\");\n      navigate(\"/inventory\");\n      \n    } catch (error) {\n      console.error(\"Error saving inventory counts:\", error);\n      toast.dismiss();\n      toast.error(\"Failed to save inventory counts: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n    }\n  };\n\n  const updateRecognizedItem = (index: number, updatedItem: InventoryRecognitionResult) => {\n    const updatedItems = [...recognizedItems];\n    updatedItems[index] = updatedItem;\n    setRecognizedItems(updatedItems);\n  };\n\n  const removeRecognizedItem = (index: number) => {\n    const updatedItems = recognizedItems.filter((_, i) => i !== index);\n    setRecognizedItems(updatedItems);\n    toast.success(\"Item removed from list\");\n  };\n\n  const resetCapture = () => {\n    setCapturedImage(null);\n    setAnalysisResult(null);\n    setRecognizedItems([]);\n  };\n\n  const goToAddProduct = () => {\n    if (capturedImage) {\n      sessionStorage.setItem('capturedProductImage', capturedImage);\n      navigate(\"/add-product?mode=camera\");\n    } else {\n      navigate(\"/add-product\");\n    }\n  };\n\n  const checkIfItemExists = (name: string): Product | undefined => {\n    if (!name) return undefined;\n    \n    const normalizedName = name.toLowerCase().trim();\n    return products.find(\n      product => product.name.toLowerCase().trim().includes(normalizedName) || \n                normalizedName.includes(product.name.toLowerCase().trim())\n    );\n  };\n\n  const addToInventory = async (item: InventoryRecognitionResult) => {\n    try {\n      toast.loading(`Adding \"${item.name}\" to inventory...`);\n      \n      // Create a new product\n      const newProduct = await addProduct({\n        name: item.name,\n        category: \"Other\", // Default category\n        unit: \"each\", // Default unit\n        currentStock: item.count,\n        reorderPoint: 5, // Default reorder point\n        cost: 0, // Default cost\n        size: item.size\n      });\n\n      // Update the recognized item with the new product ID\n      const updatedItems = recognizedItems.map(existingItem => {\n        if (existingItem.name === item.name) {\n          return { ...existingItem, productId: newProduct.id };\n        }\n        return existingItem;\n      });\n      \n      setRecognizedItems(updatedItems);\n      \n      toast.dismiss();\n      toast.success(`\"${item.name}\" added to inventory`);\n      \n      return newProduct;\n    } catch (error) {\n      console.error(\"Error adding item to inventory:\", error);\n      toast.dismiss();\n      toast.error(\"Failed to add item to inventory\");\n      return null;\n    }\n  };\n\n  return {\n    capturedImage,\n    setCapturedImage,\n    isAnalyzing,\n    analysisResult,\n    recognizedItems,\n    isUploading,\n    resetCapture,\n    analyzeImage,\n    processVideo,\n    saveInventoryCounts,\n    updateRecognizedItem,\n    removeRecognizedItem,\n    goToAddProduct,\n    handleFileSelected,\n    checkIfItemExists,\n    addToInventory\n  };\n};\n","\nimport { useState, useRef } from \"react\";\nimport { Camera, Loader2, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\n\ninterface CameraCaptureProps {\n  capturedImage: string | null;\n  onImageCaptured: (imageData: string) => void;\n  onResetCapture: () => void;\n  isAnalyzing: boolean;\n}\n\nconst CameraCapture = ({ \n  capturedImage, \n  onImageCaptured,\n  onResetCapture,\n  isAnalyzing\n}: CameraCaptureProps) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n\n  const startCamera = async () => {\n    try {\n      const constraints = {\n        video: {\n          facingMode: \"environment\",\n        },\n        audio: false\n      };\n      \n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        mediaStreamRef.current = stream;\n        setIsCapturing(true);\n      }\n    } catch (error) {\n      console.error(\"Error starting camera:\", error);\n      toast.error(\"Failed to access camera\");\n    }\n  };\n\n  const stopCamera = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n      setIsCapturing(false);\n    }\n  };\n\n  const captureImage = () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    \n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    \n    if (!context) return;\n    \n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \n    const imageDataUrl = canvas.toDataURL(\"image/jpeg\");\n    onImageCaptured(imageDataUrl);\n    \n    stopCamera();\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"video-container bg-gray-100 rounded-md\">\n        {!capturedImage ? (\n          <video \n            ref={videoRef} \n            autoPlay \n            playsInline\n            className={isCapturing ? \"opacity-100\" : \"opacity-0\"}\n            onLoadedMetadata={() => {\n              if (videoRef.current) {\n                videoRef.current.classList.remove(\"opacity-0\");\n                videoRef.current.classList.add(\"opacity-100\");\n              }\n            }}\n          />\n        ) : (\n          <img \n            src={capturedImage} \n            alt=\"Captured inventory\" \n            className=\"w-full h-full object-contain\"\n          />\n        )}\n        <canvas ref={canvasRef} className=\"hidden\" />\n      </div>\n\n      <div className=\"flex justify-center gap-2\">\n        {!isCapturing && !capturedImage && (\n          <Button onClick={startCamera}>\n            <Camera className=\"mr-2 h-4 w-4\" />\n            Start Camera\n          </Button>\n        )}\n\n        {isCapturing && !capturedImage && (\n          <Button onClick={captureImage}>\n            <Camera className=\"mr-2 h-4 w-4\" />\n            Capture Image\n          </Button>\n        )}\n\n        {capturedImage && !isAnalyzing && (\n          <Button disabled>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Analyzing...\n          </Button>\n        )}\n\n        {isAnalyzing && (\n          <Button disabled>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Analyzing...\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CameraCapture;\n","\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Camera, Loader2, Upload } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface VideoUploaderProps {\n  onVideoSelected: (file: File) => void;\n  isProcessing: boolean;\n  onProcessVideo: () => void;\n}\n\nconst VideoUploader = ({ \n  onVideoSelected, \n  isProcessing, \n  onProcessVideo \n}: VideoUploaderProps) => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      setSelectedFile(file);\n      onVideoSelected(file);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const file = e.dataTransfer.files[0];\n      if (file.type.startsWith('video/')) {\n        setSelectedFile(file);\n        onVideoSelected(file);\n      }\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div \n        className={cn(\n          \"border-2 border-dashed rounded-lg p-6 text-center transition-colors\",\n          isDragging ? \"border-primary bg-primary/5\" : \"border-gray-300\",\n          selectedFile ? \"border-green-300 bg-green-50\" : \"\"\n        )}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <input\n          type=\"file\"\n          accept=\"video/*\"\n          onChange={handleFileUpload}\n          className=\"hidden\"\n          id=\"video-upload\"\n        />\n        <label \n          htmlFor=\"video-upload\"\n          className=\"cursor-pointer flex flex-col items-center justify-center gap-2\"\n        >\n          <div className={cn(\n            \"p-4 rounded-full\", \n            selectedFile ? \"bg-green-100\" : \"bg-gray-100\"\n          )}>\n            {selectedFile ? (\n              <Upload className=\"h-8 w-8 text-green-500\" />\n            ) : (\n              <Camera className=\"h-8 w-8 text-gray-500\" />\n            )}\n          </div>\n          <span className=\"text-sm font-medium\">\n            {selectedFile ? \"Video selected\" : \"Click or drag to upload video\"}\n          </span>\n          <span className=\"text-xs text-muted-foreground\">\n            MP4, MOV, or AVI up to 100MB\n          </span>\n        </label>\n        {selectedFile && (\n          <div className=\"mt-3 text-sm bg-green-50 p-2 rounded border border-green-200\">\n            <div className=\"font-medium\">Selected: {selectedFile.name}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-center\">\n        <Button\n          onClick={onProcessVideo}\n          disabled={!selectedFile || isProcessing}\n          className={selectedFile ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n        >\n          {isProcessing ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Processing...\n            </>\n          ) : (\n            <>\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Process Video\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoUploader;\n","import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trash2, Plus } from \"lucide-react\";\nimport { InventoryRecognitionResult, Product } from \"@/types/inventory\";\n\ninterface RecognizedItemsListProps {\n  items: InventoryRecognitionResult[];\n  products: Product[];\n  onUpdateItem: (index: number, item: InventoryRecognitionResult) => void;\n  onRemoveItem: (index: number) => void;\n  onAddToInventory: (item: InventoryRecognitionResult) => Promise<Product | null>;\n  checkIfItemExists: (name: string) => Product | undefined;\n}\n\nconst RecognizedItemsList = ({\n  items,\n  products,\n  onUpdateItem,\n  onRemoveItem,\n  onAddToInventory,\n  checkIfItemExists\n}: RecognizedItemsListProps) => {\n  if (!items.length) return null;\n\n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Recognized Items</h3>\n          <div className=\"space-y-3\">\n            {items.map((item, index) => {\n              const existingProduct = checkIfItemExists(item.name);\n              const isInInventory = !!existingProduct || !!item.productId;\n\n              return (\n                <div key={index} className=\"flex flex-col gap-3 p-2 bg-gray-50 rounded-md\">\n                  <div className=\"w-full\">\n                    <Input\n                      value={item.name}\n                      onChange={(e) => onUpdateItem(index, { ...item, name: e.target.value })}\n                      className=\"mb-1 w-full min-w-0 break-words\"\n                    />\n                    <div className=\"text-sm text-gray-500\">\n                      Size: {item.size && item.size !== 'N/A' ? item.size : 'Not specified'} | Count: {item.count} | \n                      Confidence: {Math.round(item.confidence * 100)}%\n                    </div>\n                    {existingProduct && (\n                      <div className=\"text-sm text-blue-600 mt-1\">\n                        Matches existing product: {existingProduct.name}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2 justify-end\">\n                    {!isInInventory && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onAddToInventory(item)}\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Add to Inventory\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onRemoveItem(index)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default RecognizedItemsList;\n","import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Download, Plus, RefreshCw, Printer, BarChart2 } from \"lucide-react\";\nimport { InventoryRecognitionResult, Product } from \"@/types/inventory\";\nimport RecognizedItemsList from \"./RecognizedItemsList\";\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { addProduct } from \"@/services/api/productService\";\n\ninterface AnalysisResultsProps {\n  analysisResult: string;\n  recognizedItems: InventoryRecognitionResult[];\n  products: Product[];\n  onSaveInventoryCounts: () => void;\n  onGoToAddProduct: () => void;\n  onResetCapture: () => void;\n  onUpdateItem: (index: number, item: InventoryRecognitionResult) => void;\n  onRemoveItem: (index: number) => void;\n}\n\nconst AnalysisResults = ({\n  analysisResult,\n  recognizedItems,\n  products,\n  onSaveInventoryCounts,\n  onGoToAddProduct,\n  onResetCapture,\n  onUpdateItem,\n  onRemoveItem,\n}: AnalysisResultsProps) => {\n  const [isAddingToInventory, setIsAddingToInventory] = useState(false);\n\n  const checkIfItemExists = (name: string): Product | undefined => {\n    return products.find(p => \n      p.name.toLowerCase() === name.toLowerCase() ||\n      p.name.toLowerCase().includes(name.toLowerCase()) ||\n      name.toLowerCase().includes(p.name.toLowerCase())\n    );\n  };\n\n  const addToInventory = async (item: InventoryRecognitionResult) => {\n    try {\n      setIsAddingToInventory(true);\n      toast.loading(`Adding \"${item.name}\" to inventory...`);\n      \n      // Create a new product\n      const newProduct = await addProduct({\n        name: item.name,\n        category: \"Other\", // Default category\n        unit: \"each\", // Default unit\n        currentStock: item.count,\n        reorderPoint: 5, // Default reorder point\n        cost: 0, // Default cost\n        size: item.size\n      });\n\n      // Update the recognized item with the new product ID\n      const updatedItem = { ...item, productId: newProduct.id };\n      const itemIndex = recognizedItems.findIndex(i => i.name === item.name);\n      if (itemIndex !== -1) {\n        onUpdateItem(itemIndex, updatedItem);\n      }\n      \n      toast.dismiss();\n      toast.success(`\"${item.name}\" added to inventory`);\n      \n      return newProduct;\n    } catch (error) {\n      console.error(\"Error adding item to inventory:\", error);\n      toast.dismiss();\n      toast.error(\"Failed to add item to inventory\");\n      return null;\n    } finally {\n      setIsAddingToInventory(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={onSaveInventoryCounts}\n            >\n              <Check className=\"h-4 w-4 mr-1\" />\n              Save Counts\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={onResetCapture}\n            >\n              <RefreshCw className=\"h-4 w-4 mr-1\" />\n              Reset\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={onGoToAddProduct}\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add Product\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <RecognizedItemsList\n        items={recognizedItems}\n        products={products}\n        onUpdateItem={onUpdateItem}\n        onRemoveItem={onRemoveItem}\n        onAddToInventory={addToInventory}\n        checkIfItemExists={checkIfItemExists}\n      />\n\n      {analysisResult && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <pre className=\"text-xs whitespace-pre-wrap\">{analysisResult}</pre>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default AnalysisResults;\n","\nimport { useState } from \"react\";\nimport Layout from \"@/components/layout/Layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getProducts } from \"@/services/apiService\";\nimport { useScanAnalysis } from \"@/hooks/useScanAnalysis\";\nimport CameraCapture from \"@/components/scan/CameraCapture\";\nimport VideoUploader from \"@/components/scan/VideoUploader\";\nimport AnalysisResults from \"@/components/scan/AnalysisResults\";\n\nconst Scan = () => {\n  const [tab, setTab] = useState(\"camera\");\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"products\"],\n    queryFn: getProducts\n  });\n\n  const {\n    capturedImage,\n    setCapturedImage,\n    isAnalyzing,\n    analysisResult,\n    recognizedItems,\n    isUploading,\n    resetCapture,\n    analyzeImage,\n    processVideo,\n    saveInventoryCounts,\n    updateRecognizedItem,\n    removeRecognizedItem,\n    goToAddProduct,\n    handleFileSelected,\n    checkIfItemExists,\n    addToInventory\n  } = useScanAnalysis(products);\n\n  const handleImageCaptured = (imageDataUrl: string) => {\n    setCapturedImage(imageDataUrl);\n    analyzeImage(imageDataUrl);\n  };\n\n  return (\n    <Layout \n      title=\"Scan Inventory\" \n      description=\"Use your camera to automatically count inventory items\"\n    >\n      <div className=\"p-6\">\n        <Tabs defaultValue=\"camera\" value={tab} onValueChange={setTab}>\n          <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n            <TabsTrigger value=\"camera\">Camera Scan</TabsTrigger>\n            <TabsTrigger value=\"upload\">Upload Video</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"camera\" className=\"space-y-4\">\n            <Card>\n              <CardContent className=\"p-6 space-y-4\">\n                <CameraCapture \n                  capturedImage={capturedImage}\n                  onImageCaptured={handleImageCaptured}\n                  onResetCapture={resetCapture}\n                  isAnalyzing={isAnalyzing}\n                />\n              </CardContent>\n            </Card>\n\n            {analysisResult && (\n              <AnalysisResults \n                analysisResult={analysisResult}\n                recognizedItems={recognizedItems}\n                products={products}\n                onSaveInventoryCounts={saveInventoryCounts}\n                onGoToAddProduct={goToAddProduct}\n                onResetCapture={resetCapture}\n                onUpdateItem={updateRecognizedItem}\n                onRemoveItem={removeRecognizedItem}\n                onAddToInventory={addToInventory}\n                checkIfItemExists={checkIfItemExists}\n              />\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"upload\">\n            <Card>\n              <CardContent className=\"p-6 space-y-4\">\n                <VideoUploader \n                  onVideoSelected={handleFileSelected}\n                  isProcessing={isUploading} \n                  onProcessVideo={processVideo}\n                />\n\n                {recognizedItems.length > 0 && (\n                  <AnalysisResults \n                    analysisResult={analysisResult || \"\"}\n                    recognizedItems={recognizedItems}\n                    products={products}\n                    onSaveInventoryCounts={saveInventoryCounts}\n                    onGoToAddProduct={goToAddProduct}\n                    onResetCapture={resetCapture}\n                    onUpdateItem={updateRecognizedItem}\n                    onRemoveItem={removeRecognizedItem}\n                    onAddToInventory={addToInventory}\n                    checkIfItemExists={checkIfItemExists}\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Scan;\n"],"names":["RefreshCw","createLucideIcon","useScanAnalysis","products","navigate","useNavigate","capturedImage","setCapturedImage","useState","isAnalyzing","setIsAnalyzing","analysisResult","setAnalysisResult","recognizedItems","setRecognizedItems","isUploading","setIsUploading","selectedFile","setSelectedFile","analyzeImage","imageData","imageToAnalyze","base64Data","toast","result","analyzeImageWithOpenAI","extractItemsFromAnalysis","error","analysisText","items","lines","currentProductName","currentSize","currentQuantity","line","sizeMatch","nameLine","sizeInName","quantityLine","matchedProduct","checkIfItemExists","processVideo","results","processInventoryVideo","handleFileSelected","file","saveInventoryCounts","validCounts","item","addInventoryCounts","updateRecognizedItem","index","updatedItem","updatedItems","removeRecognizedItem","_","i","resetCapture","goToAddProduct","name","normalizedName","product","newProduct","addProduct","existingItem","CameraCapture","onImageCaptured","onResetCapture","videoRef","useRef","canvasRef","mediaStreamRef","isCapturing","setIsCapturing","startCamera","constraints","stream","stopCamera","track","captureImage","video","canvas","context","imageDataUrl","jsxs","jsx","Button","Camera","Loader2","VideoUploader","onVideoSelected","isProcessing","onProcessVideo","isDragging","setIsDragging","handleFileUpload","event","handleDrop","e","handleDragOver","handleDragLeave","cn","Upload","Fragment","RecognizedItemsList","onUpdateItem","onRemoveItem","onAddToInventory","Card","CardContent","existingProduct","isInInventory","Input","Plus","Trash2","AnalysisResults","onSaveInventoryCounts","onGoToAddProduct","isAddingToInventory","setIsAddingToInventory","p","addToInventory","itemIndex","Check","Scan","tab","setTab","useQuery","getProducts","handleImageCaptured","Layout","Tabs","TabsList","TabsTrigger","TabsContent"],"mappings":"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","x_google_ignoreList":[0]}