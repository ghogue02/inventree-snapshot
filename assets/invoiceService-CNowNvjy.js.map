{"version":3,"mappings":"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","names":["getInvoices","invoicesData","invoicesError","supabase","toast","invoice","itemsData","itemsError","item","mapProductFromDatabase","error","addInvoice","invoiceData","invoiceError","invoiceId","itemsToInsert","processInvoiceImage","imageFile","formData","data","loadMockInvoices","mockInvoices","__vitePreload","uniqueProducts","productMap","productName","productData","productError","mockInvoice","validItems","productId","total","sum"],"ignoreList":[],"sources":["../../src/services/api/invoiceService.ts"],"sourcesContent":["import { toast } from \"sonner\";\nimport { Invoice, InvoiceItem, InvoiceRecognitionResult } from \"@/types/inventory\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { mapProductFromDatabase } from \"./utils\";\n\nexport const getInvoices = async (): Promise<Invoice[]> => {\n  try {\n    // First get all invoices\n    const { data: invoicesData, error: invoicesError } = await supabase\n      .from('invoices')\n      .select('*')\n      .order('date', { ascending: false });\n      \n    if (invoicesError) {\n      console.error('Error fetching invoices:', invoicesError);\n      toast.error(\"Failed to fetch invoices\");\n      throw invoicesError;\n    }\n\n    // For each invoice, fetch its items\n    const invoicesWithItems = await Promise.all(\n      invoicesData.map(async (invoice) => {\n        const { data: itemsData, error: itemsError } = await supabase\n          .from('invoice_items')\n          .select(`\n            *,\n            product:products(*)\n          `)\n          .eq('invoice_id', invoice.id);\n          \n        if (itemsError) {\n          console.error(`Error fetching items for invoice ${invoice.id}:`, itemsError);\n          return { ...invoice, items: [] };\n        }\n        \n        return {\n          id: invoice.id,\n          supplierName: invoice.supplier_name,\n          invoiceNumber: invoice.invoice_number,\n          date: new Date(invoice.date),\n          total: invoice.total,\n          paidStatus: invoice.paid_status as 'paid' | 'unpaid' | 'partial',\n          imageUrl: invoice.image_url,\n          items: itemsData.map(item => ({\n            id: item.id,\n            invoiceId: item.invoice_id,\n            productId: item.product_id,\n            product: item.product ? mapProductFromDatabase(item.product) : undefined,\n            quantity: item.quantity,\n            unitPrice: item.unit_price,\n            total: item.total\n          }))\n        };\n      })\n    );\n    \n    return invoicesWithItems as Invoice[];\n  } catch (error) {\n    console.error('Error in getInvoices:', error);\n    throw error;\n  }\n};\n\nexport const addInvoice = async (invoice: Omit<Invoice, \"id\">): Promise<Invoice> => {\n  try {\n    // Start a Supabase transaction\n    const { data: invoiceData, error: invoiceError } = await supabase\n      .from('invoices')\n      .insert({\n        supplier_name: invoice.supplierName,\n        invoice_number: invoice.invoiceNumber,\n        date: invoice.date.toISOString(),\n        total: invoice.total,\n        paid_status: invoice.paidStatus,\n        image_url: invoice.imageUrl\n      })\n      .select()\n      .single();\n      \n    if (invoiceError) {\n      console.error('Error creating invoice:', invoiceError);\n      toast.error(\"Failed to create invoice\");\n      throw invoiceError;\n    }\n    \n    const invoiceId = invoiceData.id;\n    \n    // Insert all invoice items\n    const itemsToInsert = invoice.items.map(item => ({\n      invoice_id: invoiceId,\n      product_id: item.productId,\n      quantity: item.quantity,\n      unit_price: item.unitPrice,\n      total: item.total\n    }));\n    \n    const { error: itemsError } = await supabase\n      .from('invoice_items')\n      .insert(itemsToInsert);\n      \n    if (itemsError) {\n      console.error('Error adding invoice items:', itemsError);\n      // Clean up the invoice if items failed\n      await supabase.from('invoices').delete().eq('id', invoiceId);\n      toast.error(\"Failed to add invoice items\");\n      throw itemsError;\n    }\n    \n    toast.success(\"Invoice added successfully\");\n\n    // Return the complete invoice\n    const completeInvoice: Invoice = {\n      id: invoiceId,\n      supplierName: invoiceData.supplier_name,\n      invoiceNumber: invoiceData.invoice_number,\n      date: new Date(invoiceData.date),\n      total: invoiceData.total,\n      paidStatus: invoiceData.paid_status as 'paid' | 'unpaid' | 'partial',\n      imageUrl: invoiceData.image_url,\n      items: invoice.items.map(item => ({\n        ...item,\n        id: '', // We don't have the IDs yet but they'll be fetched on the next getInvoices call\n        invoiceId: invoiceId\n      }))\n    };\n    \n    return completeInvoice;\n  } catch (error) {\n    console.error('Error in addInvoice:', error);\n    throw error;\n  }\n};\n\nexport const updateInvoice = async (invoice: Invoice): Promise<Invoice> => {\n  try {\n    // Update the invoice basic info\n    const { error: invoiceError } = await supabase\n      .from('invoices')\n      .update({\n        supplier_name: invoice.supplierName,\n        invoice_number: invoice.invoiceNumber,\n        date: invoice.date.toISOString(),\n        total: invoice.total,\n        paid_status: invoice.paidStatus,\n        image_url: invoice.imageUrl\n      })\n      .eq('id', invoice.id);\n      \n    if (invoiceError) {\n      console.error('Error updating invoice:', invoiceError);\n      toast.error(\"Failed to update invoice\");\n      throw invoiceError;\n    }\n\n    // Delete all existing items and insert the new ones\n    const { error: deleteError } = await supabase\n      .from('invoice_items')\n      .delete()\n      .eq('invoice_id', invoice.id);\n      \n    if (deleteError) {\n      console.error('Error deleting invoice items:', deleteError);\n      toast.error(\"Failed to update invoice items\");\n      throw deleteError;\n    }\n    \n    const itemsToInsert = invoice.items.map(item => ({\n      invoice_id: invoice.id,\n      product_id: item.productId,\n      quantity: item.quantity,\n      unit_price: item.unitPrice,\n      total: item.total\n    }));\n    \n    const { error: insertError } = await supabase\n      .from('invoice_items')\n      .insert(itemsToInsert);\n      \n    if (insertError) {\n      console.error('Error re-inserting invoice items:', insertError);\n      toast.error(\"Failed to update invoice items\");\n      throw insertError;\n    }\n    \n    toast.success(\"Invoice updated successfully\");\n    return invoice;\n  } catch (error) {\n    console.error('Error in updateInvoice:', error);\n    throw error;\n  }\n};\n\nexport const deleteInvoice = async (id: string): Promise<void> => {\n  try {\n    // Due to the CASCADE relationship, deleting the invoice will also delete its items\n    const { error } = await supabase\n      .from('invoices')\n      .delete()\n      .eq('id', id);\n      \n    if (error) {\n      console.error('Error deleting invoice:', error);\n      toast.error(\"Failed to delete invoice\");\n      throw error;\n    }\n    \n    toast.success(\"Invoice deleted successfully\");\n  } catch (error) {\n    console.error('Error in deleteInvoice:', error);\n    throw error;\n  }\n};\n\nexport const processInvoiceImage = async (imageFile: File): Promise<InvoiceRecognitionResult> => {\n  try {\n    const formData = new FormData();\n    formData.append('file', imageFile);\n\n    const { data, error } = await supabase.functions.invoke('process-invoice', {\n      body: formData,\n    });\n\n    if (error) {\n      console.error('Error processing invoice image:', error);\n      throw new Error(error.message);\n    }\n\n    // Map the response to our expected format\n    const invoiceResult: InvoiceRecognitionResult = {\n      supplierName: data.supplierName,\n      invoiceNumber: data.invoiceNumber,\n      date: data.date,\n      total: data.total,\n      items: data.items.map((item: any) => ({\n        name: item.name,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        total: item.total\n      }))\n    };\n\n    return invoiceResult;\n  } catch (error) {\n    console.error('Error in processInvoiceImage:', error);\n    throw error;\n  }\n};\n\nexport const loadMockInvoices = async (): Promise<void> => {\n  try {\n    // Import mock invoices\n    const { mockInvoices } = await import('@/data/mockInvoices');\n    \n    // First, create a map of all unique products from the mock invoices\n    const uniqueProducts = new Set<string>();\n    mockInvoices.forEach(invoice => {\n      invoice.items.forEach(item => {\n        uniqueProducts.add(item.name);\n      });\n    });\n    \n    // Create products for each unique item and store their IDs\n    const productMap = new Map<string, string>();\n    for (const productName of uniqueProducts) {\n      try {\n        const { data: productData, error: productError } = await supabase\n          .from('products')\n          .insert({\n            name: productName,\n            category: 'Other',\n            unit: 'each',\n            current_stock: 0,\n            reorder_point: 5,\n            cost: 0\n          })\n          .select()\n          .single();\n          \n        if (productError) {\n          console.error('Error creating product:', productError);\n          toast.error(`Failed to create product: ${productName}`);\n          continue;\n        }\n        \n        if (productData) {\n          productMap.set(productName, productData.id);\n        }\n      } catch (error) {\n        console.error(`Error creating product ${productName}:`, error);\n        toast.error(`Failed to create product: ${productName}`);\n      }\n    }\n    \n    // Process each invoice\n    for (const mockInvoice of mockInvoices) {\n      try {\n        // Validate that we have product IDs for all items\n        const validItems = mockInvoice.items.filter(item => {\n          const productId = productMap.get(item.name);\n          if (!productId) {\n            console.warn(`Skipping item ${item.name} - no product ID found`);\n          }\n          return !!productId;\n        });\n        \n        if (validItems.length === 0) {\n          console.error('No valid items found for invoice:', mockInvoice.invoiceNumber);\n          continue;\n        }\n        \n        // Calculate total from valid items only\n        const total = validItems.reduce((sum, item) => sum + item.total, 0);\n        \n        // Create the invoice\n        const { data: invoiceData, error: invoiceError } = await supabase\n          .from('invoices')\n          .insert({\n            supplier_name: mockInvoice.supplier,\n            invoice_number: mockInvoice.invoiceNumber,\n            date: mockInvoice.date,\n            total: total,\n            paid_status: 'paid',\n            image_url: null\n          })\n          .select()\n          .single();\n          \n        if (invoiceError) {\n          console.error('Error creating mock invoice:', invoiceError);\n          toast.error(`Failed to create invoice ${mockInvoice.invoiceNumber}`);\n          continue;\n        }\n        \n        const invoiceId = invoiceData.id;\n        \n        // Create invoice items only for products that exist\n        const itemsToInsert = validItems.map(item => ({\n          invoice_id: invoiceId,\n          product_id: productMap.get(item.name)!,\n          quantity: item.quantity,\n          unit_price: item.pricePerUnit,\n          total: item.total\n        }));\n        \n        const { error: itemsError } = await supabase\n          .from('invoice_items')\n          .insert(itemsToInsert);\n          \n        if (itemsError) {\n          console.error('Error adding mock invoice items:', itemsError);\n          // Clean up the invoice if items failed\n          await supabase.from('invoices').delete().eq('id', invoiceId);\n          toast.error(`Failed to add items for invoice ${mockInvoice.invoiceNumber}`);\n          continue;\n        }\n        \n        toast.success(`Invoice ${mockInvoice.invoiceNumber} created successfully`);\n      } catch (error) {\n        console.error(`Error processing invoice ${mockInvoice.invoiceNumber}:`, error);\n        toast.error(`Failed to process invoice ${mockInvoice.invoiceNumber}`);\n      }\n    }\n    \n    toast.success(\"Mock invoices loaded successfully\");\n  } catch (error) {\n    console.error('Error in loadMockInvoices:', error);\n    toast.error(\"Failed to load mock invoices\");\n    throw error;\n  }\n};\n"],"file":"assets/invoiceService-CNowNvjy.js"}