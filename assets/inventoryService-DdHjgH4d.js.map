{"version":3,"file":"inventoryService-DdHjgH4d.js","sources":["../../src/services/api/inventoryService.ts"],"sourcesContent":["\nimport { toast } from \"sonner\";\nimport { InventoryCount, InventoryRecognitionResult } from \"@/types/inventory\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { mapProductFromDatabase } from \"./utils\";\n\nexport const getInventoryCounts = async (): Promise<InventoryCount[]> => {\n  try {\n    const { data, error } = await supabase\n      .from('inventory_counts')\n      .select(`\n        *,\n        product:products(*)\n      `)\n      .order('counted_at', { ascending: false });\n      \n    if (error) {\n      console.error('Error fetching inventory counts:', error);\n      toast.error(\"Failed to fetch inventory counts\");\n      throw error;\n    }\n    \n    return data.map(count => ({\n      id: count.id,\n      productId: count.product_id,\n      product: count.product ? mapProductFromDatabase(count.product) : undefined,\n      count: count.count,\n      countedAt: new Date(count.counted_at),\n      countMethod: count.count_method as 'manual' | 'video' | 'invoice',\n      notes: count.notes || undefined\n    })) as InventoryCount[];\n  } catch (error) {\n    console.error('Error in getInventoryCounts:', error);\n    throw error;\n  }\n};\n\nexport const addInventoryCount = async (count: Omit<InventoryCount, \"id\">): Promise<InventoryCount> => {\n  try {\n    const { data, error } = await supabase\n      .from('inventory_counts')\n      .insert({\n        product_id: count.productId,\n        count: count.count,\n        counted_at: count.countedAt.toISOString(),\n        count_method: count.countMethod,\n        notes: count.notes\n      })\n      .select(`\n        *,\n        product:products(*)\n      `)\n      .single();\n      \n    if (error) {\n      console.error('Error adding inventory count:', error);\n      toast.error(\"Failed to add inventory count\");\n      throw error;\n    }\n    \n    toast.success(\"Inventory count added successfully\");\n    \n    return {\n      id: data.id,\n      productId: data.product_id,\n      product: data.product ? mapProductFromDatabase(data.product) : undefined,\n      count: data.count,\n      countedAt: new Date(data.counted_at),\n      countMethod: data.count_method as 'manual' | 'video' | 'invoice',\n      notes: data.notes || undefined\n    } as InventoryCount;\n  } catch (error) {\n    console.error('Error in addInventoryCount:', error);\n    throw error;\n  }\n};\n\n// Add bulk inventory counts\nexport const addInventoryCounts = async (counts: Omit<InventoryCount, \"id\">[]): Promise<InventoryCount[]> => {\n  try {\n    const countRecords = counts.map(count => ({\n      product_id: count.productId,\n      count: count.count,\n      counted_at: count.countedAt.toISOString(),\n      count_method: count.countMethod,\n      notes: count.notes\n    }));\n    \n    const { data, error } = await supabase\n      .from('inventory_counts')\n      .insert(countRecords)\n      .select(`\n        *,\n        product:products(*)\n      `);\n      \n    if (error) {\n      console.error('Error adding bulk inventory counts:', error);\n      toast.error(\"Failed to add inventory counts\");\n      throw error;\n    }\n    \n    toast.success(`${data.length} inventory counts added successfully`);\n    \n    return data.map(item => ({\n      id: item.id,\n      productId: item.product_id,\n      product: item.product ? mapProductFromDatabase(item.product) : undefined,\n      count: item.count,\n      countedAt: new Date(item.counted_at),\n      countMethod: item.count_method as 'manual' | 'video' | 'invoice',\n      notes: item.notes || undefined\n    })) as InventoryCount[];\n  } catch (error) {\n    console.error('Error in addInventoryCounts:', error);\n    throw error;\n  }\n};\n\nexport const processInventoryVideo = async (videoFile: File): Promise<InventoryRecognitionResult[]> => {\n  try {\n    const formData = new FormData();\n    formData.append('file', videoFile);\n\n    const { data, error } = await supabase.functions.invoke('process-inventory', {\n      body: formData,\n    });\n\n    if (error) {\n      console.error('Error processing inventory video:', error);\n      throw new Error(error.message);\n    }\n\n    // Get products for matching\n    const { data: products, error: productsError } = await supabase\n      .from('products')\n      .select('*');\n    \n    if (productsError) {\n      console.error('Error fetching products for matching:', productsError);\n      throw productsError;\n    }\n    \n    // Map the response to our expected format\n    const results: InventoryRecognitionResult[] = data.items.map((item: any) => {\n      const matchedProduct = products?.find(p => \n        p.name.toLowerCase().includes(item.name.toLowerCase()) || \n        item.name.toLowerCase().includes(p.name.toLowerCase())\n      );\n\n      return {\n        productId: matchedProduct?.id || '',\n        name: item.name,\n        count: item.count,\n        confidence: 0.8 + Math.random() * 0.2 // Simulate confidence between 0.8 and 1.0\n      };\n    });\n\n    // Filter out items without matching products\n    return results.filter(item => item.productId !== '');\n  } catch (error) {\n    console.error('Error in processInventoryVideo:', error);\n    throw error;\n  }\n};\n"],"names":["getInventoryCounts","data","error","supabase","toast","count","mapProductFromDatabase","addInventoryCounts","counts","countRecords","item","processInventoryVideo","videoFile","formData","products","productsError","p"],"mappings":"oHAMO,MAAMA,EAAqB,SAAuC,CACnE,GAAA,CACI,KAAA,CAAE,KAAAC,EAAM,MAAAC,GAAU,MAAMC,EAC3B,KAAK,kBAAkB,EACvB,OAAO;AAAA;AAAA;AAAA,OAGP,EACA,MAAM,aAAc,CAAE,UAAW,GAAO,EAE3C,GAAID,EACM,cAAA,MAAM,mCAAoCA,CAAK,EACvDE,EAAM,MAAM,kCAAkC,EACxCF,EAGD,OAAAD,EAAK,IAAcI,IAAA,CACxB,GAAIA,EAAM,GACV,UAAWA,EAAM,WACjB,QAASA,EAAM,QAAUC,EAAuBD,EAAM,OAAO,EAAI,OACjE,MAAOA,EAAM,MACb,UAAW,IAAI,KAAKA,EAAM,UAAU,EACpC,YAAaA,EAAM,aACnB,MAAOA,EAAM,OAAS,MAAA,EACtB,QACKH,EAAO,CACN,cAAA,MAAM,+BAAgCA,CAAK,EAC7CA,CAAA,CAEV,EA2CaK,EAAqB,MAAOC,GAAoE,CACvG,GAAA,CACI,MAAAC,EAAeD,EAAO,IAAcH,IAAA,CACxC,WAAYA,EAAM,UAClB,MAAOA,EAAM,MACb,WAAYA,EAAM,UAAU,YAAY,EACxC,aAAcA,EAAM,YACpB,MAAOA,EAAM,KAAA,EACb,EAEI,CAAE,KAAAJ,EAAM,MAAAC,CAAM,EAAI,MAAMC,EAC3B,KAAK,kBAAkB,EACvB,OAAOM,CAAY,EACnB,OAAO;AAAA;AAAA;AAAA,OAGP,EAEH,GAAIP,EACM,cAAA,MAAM,sCAAuCA,CAAK,EAC1DE,EAAM,MAAM,gCAAgC,EACtCF,EAGRE,OAAAA,EAAM,QAAQ,GAAGH,EAAK,MAAM,sCAAsC,EAE3DA,EAAK,IAAaS,IAAA,CACvB,GAAIA,EAAK,GACT,UAAWA,EAAK,WAChB,QAASA,EAAK,QAAUJ,EAAuBI,EAAK,OAAO,EAAI,OAC/D,MAAOA,EAAK,MACZ,UAAW,IAAI,KAAKA,EAAK,UAAU,EACnC,YAAaA,EAAK,aAClB,MAAOA,EAAK,OAAS,MAAA,EACrB,QACKR,EAAO,CACN,cAAA,MAAM,+BAAgCA,CAAK,EAC7CA,CAAA,CAEV,EAEaS,EAAwB,MAAOC,GAA2D,CACjG,GAAA,CACI,MAAAC,EAAW,IAAI,SACZA,EAAA,OAAO,OAAQD,CAAS,EAE3B,KAAA,CAAE,KAAAX,EAAM,MAAAC,CAAM,EAAI,MAAMC,EAAS,UAAU,OAAO,oBAAqB,CAC3E,KAAMU,CAAA,CACP,EAED,GAAIX,EACM,cAAA,MAAM,oCAAqCA,CAAK,EAClD,IAAI,MAAMA,EAAM,OAAO,EAI/B,KAAM,CAAE,KAAMY,EAAU,MAAOC,CAAc,EAAI,MAAMZ,EACpD,KAAK,UAAU,EACf,OAAO,GAAG,EAEb,GAAIY,EACM,cAAA,MAAM,wCAAyCA,CAAa,EAC9DA,EAmBR,OAf8Cd,EAAK,MAAM,IAAKS,IAMrD,CACL,UANqBI,GAAU,QAC/BE,EAAE,KAAK,cAAc,SAASN,EAAK,KAAK,YAAa,CAAA,GACrDA,EAAK,KAAK,YAAY,EAAE,SAASM,EAAE,KAAK,YAAa,CAAA,CACvD,GAG6B,IAAM,GACjC,KAAMN,EAAK,KACX,MAAOA,EAAK,MACZ,WAAY,GAAM,KAAK,SAAW,EACpC,EACD,EAGc,OAAeA,GAAAA,EAAK,YAAc,EAAE,QAC5CR,EAAO,CACN,cAAA,MAAM,kCAAmCA,CAAK,EAChDA,CAAA,CAEV"}